List of Routes and Controllers in village

Sub-folder: analytics
-- File: engagementAnalyticsController.js
---- Constants:
------ const express = require('express');
------ const AnalyticsService = require('../../../services/AnalyticsService'); // Assuming the path
------ const router = express.Router();
------ const analytics = await AnalyticsService.getEngagementAnalytics();
---- Functions:
------ router.get('/engagement', async (req, res) => {
-- File: memberAnalyticsController.js
---- Constants:
------ const express = require('express');
------ const AnalyticsService = require('../../../services/AnalyticsService'); // Assuming the path
------ const router = express.Router();
------ const analytics = await AnalyticsService.getMemberAnalytics();
---- Functions:
------ router.get('/members', async (req, res) => {

Sub-folder: community
-- File: accessManagementController.js
---- Constants:
------ const express = require('express');
------ const CommunityService = require('../../../services/CommunityService'); // Assuming the path
------ const router = express.Router();
------ const community = await CommunityService.manageAccess(req.params.id, req.body);
---- Functions:
------ router.put('/:id/access', async (req, res) => {
-- File: collaborationController.js
---- Constants:
------ const express = require('express');
------ const CommunityService = require('../../../services/CommunityService'); // Assuming the path
------ const router = express.Router();
------ const collaboration = await CommunityService.collaborate(req.params.id, req.body);
---- Functions:
------ router.post('/:id/collaborate', async (req, res) => {
-- File: communityBoardController.js
---- Constants:
------ const express = require('express');
------ const CommunityService = require('../../../services/CommunityService'); // Assuming the path
------ const router = express.Router();
------ const board = await CommunityService.getCommunityBoard(req.params.id);
---- Functions:
------ router.get('/:id/board', async (req, res) => {
-- File: eventController.js
---- Constants:
------ const express = require('express');
------ const EventService = require('../../../services/EventService'); // Assuming the path
------ const router = express.Router();
------ const event = await EventService.createEvent(req.params.id, req.body);
---- Functions:
------ router.post('/:id/event', async (req, res) => {

Sub-folder: feedback
-- File: feedbackCollectionController.js
---- Constants:
------ const express = require('express');
------ const FeedbackService = require('../../../services/FeedbackService'); // Assuming the path
------ const router = express.Router();
------ const feedback = await FeedbackService.collectFeedback(req.params.id, req.body);
---- Functions:
------ router.post('/:id/feedback', async (req, res) => {
-- File: feedbackResponseController.js
---- Constants:
------ const express = require('express');
------ const FeedbackService = require('../../../services/FeedbackService'); // Assuming the path
------ const router = express.Router();
------ const response = await FeedbackService.respondFeedback(req.params.id, req.body);
---- Functions:
------ router.put('/feedback/:id/response', async (req, res) => {

Sub-folder: governance
-- File: governanceAnalyticsController.js
---- Constants:
------ const express = require('express');
------ const GovernanceService = require('../../../services/GovernanceService'); // Assuming the path
------ const router = express.Router();
------ const analytics = await GovernanceService.getGovernanceAnalytics();
---- Functions:
------ router.get('/analytics', async (req, res) => {
-- File: proposalController.js
---- Constants:
------ const express = require('express');
------ const GovernanceService = require('../../../services/GovernanceService'); // Assuming the path
------ const router = express.Router();
------ const proposal = await GovernanceService.createProposal(req.params.id, req.body);
---- Functions:
------ router.post('/:id/proposal', async (req, res) => {
-- File: rewardDistributionController.js
---- Constants:
------ const express = require('express');
------ const GovernanceService = require('../../../services/GovernanceService'); // Assuming the path
------ const router = express.Router();
------ const rewards = await GovernanceService.distributeRewards(req.params.id, req.body);
---- Functions:
------ router.post('/:id/rewards', async (req, res) => {
-- File: rewardPolicyController.js
---- Constants:
------ const express = require('express');
------ const GovernanceService = require('../../../services/GovernanceService'); // Assuming the path
------ const router = express.Router();
------ const policy = await GovernanceService.updateRewardPolicy(req.params.id, req.body);
---- Functions:
------ router.put('/:id/rewardPolicy', async (req, res) => {
-- File: voteController.js
---- Constants:
------ const express = require('express');
------ const GovernanceService = require('../../../services/GovernanceService'); // Assuming the path
------ const router = express.Router();
------ const vote = await GovernanceService.castVote(req.params.id, req.body);
---- Functions:
------ router.post('/:id/vote', async (req, res) => {

Sub-folder: messaging
-- File: communityChatController.js
---- Constants:
------ const express = require('express');
------ const CommunityChatModel = require('../models/CommunityChatModel');
------ const router = express.Router();
------ const chatId = req.params.chatId;
------ const messages = await CommunityChatModel.find({chatId: chatId}).sort({timestamp: 'asc'});
------ const message = new CommunityChatModel(req.body);
---- Functions:
------ router.get('/:chatId/messages', async (req, res) => {
------ router.post('/:chatId/message', async (req, res) => {
-- File: directMessagesController.js
---- Constants:
------ const express = require('express');
------ const DirectMessagesModel = require('../models/DirectMessagesModel');
------ const router = express.Router();
------ const senderId = req.params.senderId;
------ const receiverId = req.params.receiverId;
------ const messages = await DirectMessagesModel.find({
------ const message = new DirectMessagesModel(req.body);
---- Functions:
------ router.get('/:senderId/:receiverId/messages', async (req, res) => {
------ router.post('/:senderId/:receiverId/message', async (req, res) => {
-- File: notificationController.js
---- Constants:
------ const express = require('express');
------ const MessagingService = require('../../../services/MessagingService'); // Assuming the path
------ const router = express.Router();
------ const notification = await MessagingService.sendNotification(req.params.id, req.body);
---- Functions:
------ router.post('/:id/notification', async (req, res) => {

Sub-folder: moderation
-- File: contentModerationController.js
---- Constants:
------ const express = require('express');
------ const ModerationService = require('../../../services/ModerationService'); // Assuming the path
------ const router = express.Router();
------ const moderation = await ModerationService.moderateContent(req.params.id, req.body);
---- Functions:
------ router.put('/:id/moderate', async (req, res) => {
-- File: moderationPolicyController.js
---- Constants:
------ const express = require('express');
------ const ModerationService = require('../../../services/ModerationService'); // Assuming the path
------ const router = express.Router();
------ const policy = await ModerationService.updateModerationPolicy(req.params.id, req.body);
---- Functions:
------ router.put('/:id/moderationPolicy', async (req, res) => {

Sub-folder: security
-- File: incidentResponseController.js
---- Constants:
------ const express = require('express');
------ const SecurityService = require('../../../services/SecurityService'); // Assuming the path
------ const router = express.Router();
------ const incident = await SecurityService.reportIncident(req.params.id, req.body);
---- Functions:
------ router.post('/:id/incident', async (req, res) => {
-- File: securityController.js
---- Constants:
------ const express = require('express');
------ const SecurityService = require('../../../services/SecurityService'); // Assuming the path
------ const router = express.Router();
------ const settings = await SecurityService.updateSecuritySettings(req.params.id, req.body);
---- Functions:
------ router.put('/:id/security', async (req, res) => {
