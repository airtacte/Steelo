Contracts Summary: Functions and State Variables

Folder: steez

-- File: Collection.sol

-- File: STEEZFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IDiamondCut } from "../../interfaces/IDiamondCut.sol";
------ import { BazaarFacet } from "../features/BazaarFacet.sol";
------ import { AccessControlFacet } from "../app/AccessControlFacet.sol";
------ import { SteezFeesFacet } from "./SteezFeesFacet.sol";
------ import { SnapshotFacet } from "../app/SnapshotFacet.sol";
------ import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
------ import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
------ import "@openzeppelin/contracts/utils/Address.sol";
------ import "@openzeppelin/contracts/utils/Strings.sol";
---- State Variables:
------ constant ROLE_OPERATOR
------ constant ROLE_OWNER
------ private _lastCreatorId
------ private _lastProfileId
------ private _lastSteezId
------ public baseURI
------ uint256 creatorId
---- Functions:
------ initialize requires: string memory _baseURI
------ createSteez requires: address to, bytes memory data
------ preOrder requires: uint256 creatorId, uint256 amount
------ launch requires: uint256 creatorId, uint256 amount
------ anniversary requires: uint256 creatorId, uint256 amount
------ transferSteez requires: uint256 creatorId, uint256 steezId, uint256 amount, address from, address to
------ safeBatchTransfer requires: address[] memory to, uint256[] memory creatorIds, uint256[] memory amounts, bytes memory data
------ _mint requires: address to, uint256 creatorId, uint256 steezId, uint256 amount, bytes memory data
------ _transfer requires: address from, address to, uint256 steezId
------ _removeInvestor requires: uint256 creatorId, address currentInvestor
------ _addInvestor requires: uint256 creatorId, address newInvestor, uint256 profileId, uint256 balance
------ _findInvestorIndex requires: uint256 creatorId, address investorAddress

-- File: SteezFeesFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { STEEZFacet } from "./STEEZFacet.sol";
------ import { STEELOFacet } from "../steelo/STEELOFacet.sol";
------ import { AccessControlFacet } from "../app/AccessControlFacet.sol";
------ import "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol";
------ import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
---- State Variables:
------ payable recipient
---- Functions:
------ initialize requires: address owner
------ updateRoyaltyInfo requires: uint256 creatorId, uint256 amount
------ setCommunitySplit requires: uint256 creatorId, uint256[] memory splits
------ transferSteez requires: uint256 creatorId, uint256 creatorId, uint256 amount, address from, address to
------ payRoyalties requires: uint256 creatorId, uint256 amount, address from, address to, bytes memory data
------ viewRoyalties requires: address user, uint256 creatorId
------ queueRoyaltyPayment requires: uint256 _creatorId, uint256 _amount, address payable _recipient
------ processRoyaltyQueue requires: 
------ isValidParticipant requires: address participant
------ queueRoyaltyPayment requires: uint256 _creatorId, uint256 _amount, address payable _recipient
------ processRoyaltyQueue requires: 

-- File: SteezGovernanceFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { STEEZFacet } from "./STEEZFacet.sol";
------ import { AccessControlFacet } from "../app/AccessControlFacet.sol";
------ import { ISteeloGovernanceFacet } from "../../interfaces/ISteeloFacet.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
---- Functions:
------ initialize requires: address steezTokenAddress
------ proposeBenefitChange requires: string memory benefitDescription, bytes memory callData
------ voteOnProposal requires: uint256 proposalId, bool support
------ executeProposal requires: uint256 proposalId
------ _isSteezTokenHolder requires: address account
------ propose requires: bytes memory callData, string memory benefitDescription
------ castVote requires: uint256 proposalId, uint8 vote
------ execute requires: uint256 proposalId

-- File: SteezManagementFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { AccessControlFacet } from "../app/AccessControlFacet.sol";
------ import { STEEZFacet } from "./STEEZFacet.sol";
------ import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
---- State Variables:
------ constant MANAGER_ROLE
------ constant PAUSER_ROLE
---- Functions:
------ initialize requires: address owner
------ setBaseURI requires: string memory newBaseURI
------ baseURI requires: 
------ updateCreatorAddress requires: uint256 tokenId, address newCreatorAddress
------ getCreatorAddress requires: uint256 tokenId
------ setCreatorSplit requires: uint256 tokenId, uint256[] memory splits
------ setTokenHolders requires: uint256 tokenId, address[] memory _tokenHolders, uint256[] memory shares
------ getHolders requires: uint256 tokenId
------ pause requires: 
------ unpause requires: 
------ receive requires: 
------ _isCreator requires: address profileAddress
------ _exists requires: uint256 tokenId
