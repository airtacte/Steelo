Contracts Summary: Functions and State Variables

Folder: .

-- File: DiamondCutFacet.sol
---- Imports:
------ import { LibDiamond } from "../libraries/LibDiamond.sol";
------ import { IDiamondCut } from "../interfaces/IDiamondCut.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
---- State Variables:
------ constant facetVersion
---- Functions:
------ initialize requires: 

-- File: DiamondLoupeFacet.sol
---- Imports:
------ import { LibDiamond } from "../libraries/LibDiamond.sol";
------ import { IDiamondLoupe } from "../interfaces/IDiamondLoupe.sol";
------ import { IERC165 } from "../../lib/safe-contracts/contracts/interfaces/IERC165.sol";
---- State Variables:
------ constant _INTERFACE_ID_ERC165
---- Functions:
------ facets requires: 
------ facetFunctionSelectors requires: address _facet
------ facetAddresses requires: 
------ facetAddress requires: bytes4 _functionSelector
------ supportsInterface requires: bytes4 _interfaceId

-- File: DiamondOracleFacet.sol
---- Imports:
------ import { LibDiamond } from "../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
------ import "@chainlink/contracts/src/v0.8/ChainlinkClient.sol";
---- State Variables:
------ private steezTransactionCount
------ private steeloCurrentPrice
---- Functions:
------ initialize requires: address chainlinkTokenAddress
------ requestVolumeData requires: uint256 _payment, bytes32 _jobId, address _oracle
------ fulfill requires: bytes32 _requestId, uint256 _volume
------ getLatestPrice requires: address _priceFeed
------ getSteezTransactionCount requires: 
------ getSteeloCurrentPrice requires: 

Folder: app

-- File: AccessControlFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IDiamondCut } from "../../interfaces/IDiamondCut.sol";
------ import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
------ import "@openzeppelin/contracts/access/AccessControl.sol";
---- State Variables:
------ constant UPGRADE_ROLE
------ constant STEELO_ROLE
------ constant STEEZ_ROLE
---- Functions:
------ grantUpgradeRole requires: address account
------ upgradeDiamond requires: IDiamondCut.FacetCut[] memory cuts
------ grantRoleBasedOnTokenHolding requires: address account

-- File: GasOptimisationFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
---- Functions:
------ bulkProcessData requires: uint256[] calldata data

-- File: MultiSigFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { ISafe } from "../../../lib/safe-contracts/contracts/interfaces/ISafe.sol";
------ import { SafeProxyFactory } from "../../../lib/safe-contracts/contracts/proxies/SafeProxyFactory.sol";
------ import { SafeProxy } from "../../../lib/safe-contracts/contracts/proxies/SafeProxy.sol";
---- State Variables:
------ constant SAFE_PROXY_FACTORY
------ constant SAFE_MASTER_COPY
---- Functions:
------ initialize requires: 
------ exampleMultisigFunctionality requires: 
------ transferOwnership requires: address newOwner

-- File: NotificationFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
---- Functions:
------ initialize requires: 

-- File: OwnershipFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IERC173 } from "../../interfaces/IERC173.sol";
---- Functions:
------ transferOwnership requires: address _newOwner
------ owner requires: 

-- File: SnapshotFacet.sol
---- State Variables:
------ private _snapshotCounter
------ private snapshotCounter
------ private _lastSnapshotTimestamp
---- Functions:
------ initialize requires: 
------ _incrementSnapshot requires: 
------ snapshotBalances requires: address account, uint256 balance
------ takeSnapshot requires: 
------ _takeSnapshot requires: 

-- File: SocialNetworkFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { ISafe } from "../../../lib/safe-contracts/contracts/interfaces/ISafe.sol";
------ import { ILensHub } from "../../../lib/lens-protocol/contracts/interfaces/ILensHub.sol";
---- Functions:
------ ensureOrCreateUserProfile requires: 
------ linkSafeToProfile requires: address safeAddress
------ postContent requires: uint256 profileId, string calldata contentUri
------ followProfile requires: uint256 profileIdToFollow
------ likePost requires: uint256 postId
------ getUserSafe requires: address userAddress
------ getUserProfileId requires: address userAddress

-- File: UserExperienceFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
---- Functions:
------ initialize requires: 

Folder: features

-- File: BazaarFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IPoolManager } from "../../../lib/Uniswap-v4/src/interfaces/IPoolManager.sol";
------ import { IBazaarFacet } from "../../interfaces/IFeaturesFacet.sol";
------ import { IERC1155 } from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
---- Functions:
------ initialize requires: 
------ listCreatorToken requires: uint256 tokenId, uint256 initialPrice, uint256 supply, bool isAuction
------ bidCreatorToken requires: uint256 tokenId, uint256 amount
------ buyCreatorToken requires: uint256 tokenId, uint256 amount
------ getSuggestions requires: 
------ search requires: string memory query
------ viewAnalytics requires: 
------ payForBlogPlacement requires: uint256 amount, string memory content

-- File: GalleryFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
------ import { IERC1155 } from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
------ import { IGalleryFacet } from "../../interfaces/IFeaturesFacet.sol";
------ import "@openzeppelin/contracts/utils/Strings.sol";
---- Functions:
------ initialize requires: 
------ displayNFTs requires: address nftContract, uint256 tokenId
------ manageSteez requires: address tokenContract, uint256 tokenId, uint256 amount, string memory action
------ viewPortfolioAnalytics requires: 
------ transferNFT requires: address nftContract, uint256 tokenId, address to
------ transferSteez requires: address tokenContract, uint256 tokenId, uint256 amount, address to

-- File: MosaicFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { ISteezFacet } from "../../interfaces/ISteezFacet.sol";
------ import { IMosaicFacet } from "../../interfaces/IFeaturesFacet.sol";
------ import { ILensHub } from "../../../lib/lens-protocol/contracts/interfaces/ILensHub.sol";
------ import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
------ import { IERC1155 } from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
---- Functions:
------ initialize requires: 
------ collectContent requires: uint256 contentId
------ follow requires: address userToFollow
------ like requires: uint256 contentId
------ commentOnContent requires: uint256 contentId, string calldata comment
------ invest requires: address creator, uint256 amount
------ assignCredit requires: uint256 contentId, address contributor, uint256 proportion
------ setExclusivity requires: uint256 contentId, uint8 exclusivityLevel
------ checkExclusivity requires: uint256 contentId, address user

-- File: ProfileFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IProfileFacet } from "../../interfaces/IFeaturesFacet.sol";
------ import { ILensHub } from "../../../lib/lens-protocol/contracts/interfaces/ILensHub.sol";
------ import { STEEZFacet } from "../steez/STEEZFacet.sol";
------ import { ISafe } from "../../../lib/safe-contracts/contracts/interfaces/ISafe.sol";
------ import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
------ import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
---- Functions:
------ initialize requires: 
------ initialize requires: address _lensAddress, address _safeAddress
------ setProfile requires: address user, string memory username, string memory bio, string memory avatarURI
------ usernameTaken requires: string memory username
------ getProfile requires: address user
------ postContent requires: uint256 contentId, bool isPublic
------ addInvestor requires: address investor
------ updatePortfolio requires: uint256 tokenId, uint256 amount
------ createSpace requires: uint256[] calldata contentIds
------ viewProfile requires: address user
------ viewContent requires: uint256 contentId
------ viewInvestors requires: address creator
------ viewPortfolio requires: address user
------ viewSpace requires: uint256 spaceId
------ _addInvestor requires: address creator, address investor
------ _updatePortfolio requires: address user, uint256 tokenId, uint256 amount
------ _createSpace requires: address creator, uint256[] calldata contentIds

-- File: VillageFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
------ import { IVillageFacet } from "../../interfaces/IFeaturesFacet.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
------ import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
---- Functions:
------ getKeyPair requires: address user
------ initiateTransaction requires: address sender, address receiver, uint amount, address token
------ releaseFunds requires: uint transactionId
------ refund requires: uint transactionId
------ initialize requires: 
------ createChat requires: address[] calldata participants, bool isGroup
------ sendMessage requires: uint256 chatId, string calldata message
------ groupChatGovernance requires: uint256 chatId, uint256 proposalId, bool vote
------ initiateP2PTransaction requires: address receiver, uint amount, address token

Folder: steelo

-- File: STEELOFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
------ import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
------ import "@openzeppelin/contracts/utils/Strings.sol";
------ import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
------ import "@chainlink/contracts/src/v0.8/ChainlinkClient.sol";
---- Functions:
------ steeloTGE requires: uint256 _steezTransactions, uint256 _currentPrice
------ _transfer requires: address sender, address recipient, uint256 amount
------ tokenTransfer requires: address recipient, uint256 amount
------ steeloMint requires: uint256 _steezTransactions, uint256 _currentPrice
------ calculateMintAmount requires: uint256 _steezTransactions, uint256 _currentPrice
------ calculateSupplyCap requires: uint256 _currentPrice
------ calculateBurnAmount requires: uint256 amount
------ adjustMintRate requires: uint256 _newMintRate
------ adjustBurnRate requires: uint256 _newBurnRate
------ burnTokens requires: 
------ getOwner requires: 
------ updateSteezTransactionCount requires: uint256 _mintAmount
------ updateParameters requires: uint256 _steezTransactionCount, uint256 _currentPrice
------ requestVolumeData requires: 
------ fulfill requires: bytes32 _requestId, uint256 _steezTransactionCount
------ stringToBytes32 requires: string memory source

-- File: SteeloGovernanceFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IAppFacet } from  "../../interfaces/IAppFacet.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
---- State Variables:
------ public sipCount
---- Functions:
------ initialize requires: 
------ createSIP requires: SIPType _sipType, string memory _description
------ voteOnSIP requires: uint256 _sipId, bool _voteFor
------ checkForExecution requires: uint256 _sipId
------ executeSIP requires: uint256 _sipId

-- File: SteeloImprovementProposalFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
------ import "hardhat/console.sol";
---- Functions:
------ initialize requires: 
------ createSIP requires: string memory _description, ProposalType _type, uint256 _duration
------ voteOnSIP requires: uint256 _sipId, bool _support
------ executeSIP requires: uint256 _sipId

-- File: SteeloStakingFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { ISteeloFacet } from "../../interfaces/ISteeloFacet.sol";
------ import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
---- Functions:
------ initialize requires: address _steeloFacet
------ stake requires: uint256 _amount
------ unstake requires: uint256 _amount
------ calculateReward requires: address stakeholder
------ distributeRewards requires: 
------ getTotalStaked requires: 
------ stakeAmount requires: address _user

Folder: steez

-- File: Collection.sol

-- File: STEEZFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import { IDiamondCut } from "../../interfaces/IDiamondCut.sol";
------ import { ISteezFacet } from "../../interfaces/ISteezFacet.sol";
------ import { ISteezFeesFacet } from "../../interfaces/ISteezFacet.sol";
------ import { SafeProxyFactory } from "../../../lib/safe-contracts/contracts/proxies/SafeProxyFactory.sol";
------ import { SafeProxy } from "../../../lib/safe-contracts/contracts/proxies/SafeProxy.sol";
------ import { SafeL2 } from "../../../lib/safe-contracts/contracts/SafeL2.sol";
------ import { IPoolManager } from "../../../lib/Uniswap-v4/src/interfaces/IPoolManager.sol";
------ import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
------ import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
------ import "@openzeppelin/contracts/utils/Address.sol";
------ import "@openzeppelin/contracts/utils/Strings.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
---- State Variables:
------ public _baseURI
------ public _safeAddress
------ public _creatorTokenAddress
------ public _maxCreatorTokens
------ public _transactionFee
------ public _currentTokenID
------ public currentPrice
------ public tokensSecuredThisBatch
------ public auctionStartTime
------ private auctionConcluded
------ private uniswapRouterAddress
---- Functions:
------ initialize requires: string memory baseURI, uint256 maxCreatorTokens, uint256 transactionFee
------ transferTokenOwnership requires: address newInvestor, uint256 tokenId
------ mint requires: address to, uint256 tokenId, uint256 amount, bytes memory data
------ preOrder requires: uint256 tokenId, uint256 amount
------ concludeAuction requires: 
------ launchToken requires: uint256 tokenId, uint256 amount
------ expandToken requires: uint256 tokenId, uint256 amount
------ expansionEligible requires: uint256 tokenId
------ checkAndInitiateAnniversary requires: uint256 tokenId
------ transferToken requires: uint256 tokenId, uint256 amount, address from, address to
------ safeBatchTransfer requires: address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data
------ safeBatchTransferFrom requires: address from, address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data
------ _addLiquidityForToken requires: uint256 tokenId, uint256 tokenAmount, uint256 steelAmount
------ _mint requires: address to, uint256 tokenId, uint256 amount, bytes memory data
------ _convertTokenIdToAddress requires: uint256 tokenId
------ _transfer requires: address from, address to, uint256 tokenId
------ _removeInvestor requires: uint256 tokenId, address currentInvestor
------ _addInvestor requires: uint256 tokenId, address newInvestor
------ getMaxAllowedMint requires: address sender, uint256 tokenId

-- File: SteezFeesFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
------ import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
------ import "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
---- State Variables:
------ private _totalShareholdings
---- Functions:
------ initialize requires: address owner
------ setCommunitySplit requires: uint256 tokenId, uint256[] memory splits
------ payRoyalties requires: uint256 tokenId, uint256 amount, address from, address to, bytes memory data
------ claimRoyalty requires: uint256 tokenId
------ viewRoyalties requires: address user, uint256 tokenId
------ updateRoyaltyRates requires: uint256[] calldata tokenIds, RoyaltyInfo[] calldata newRoyalties
------ createSnapshot requires: uint256 tokenId
------ _findSnapshotIndex requires: uint256 tokenId, address account

-- File: SteezGovernanceFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
---- State Variables:
------ constant MODERATOR_ROLE
---- Functions:
------ initialize requires: address steezTokenAddress
------ proposeBenefitChange requires: string memory benefitDescription, bytes memory callData
------ voteOnProposal requires: uint256 proposalId, bool support
------ executeProposal requires: uint256 proposalId
------ _isSteezTokenHolder requires: address account

-- File: SteezManagementFacet.sol
---- Imports:
------ import { LibDiamond } from "../../libraries/LibDiamond.sol";
------ import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
------ import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
---- State Variables:
------ constant MANAGER_ROLE
------ constant PAUSER_ROLE
---- Functions:
------ initialize requires: address owner
------ setMaxCreatorTokens requires: uint256 maxTokens
------ getMaxCreatorTokens requires: 
------ setBaseURI requires: string memory newBaseURI
------ baseURI requires: 
------ updateCreatorAddress requires: uint256 tokenId, address newCreatorAddress
------ getCreatorAddress requires: uint256 tokenId
------ setCreatorSplit requires: uint256 tokenId, uint256[] memory splits
------ setTokenHolders requires: uint256 tokenId, address[] memory _tokenHolders, uint256[] memory shares
------ getHolders requires: uint256 tokenId
------ pause requires: 
------ unpause requires: 
------ receive requires: 
------ _takeSnapshot requires: 
------ _isCreator requires: address addr
------ _exists requires: uint256 tokenId
